@startuml AIエージェント ユーザーフロー - パターンA: 新規分析要求

actor ユーザー as user
participant "UI\nシステム" as ui
participant "AI\nエージェント" as ai
database "データベース" as db

== Step 1: 画面表示 ==

user -> ui: AIエージェント画面にアクセス
activate ui

ui -> ui: localStorageから\n前回の状態を確認

alt 前回の状態が存在する
    ui -> ui: プレビューデータを復元\n(タイトル、分析要求テキスト、\n生成されたSQL、プレビューデータ)

    ui -> user: AIエージェント画面を表示\n前回の状態を復元して表示
    deactivate ui

    note over user
        復元された状態から
        続きの操作が可能
    end note

else 前回の状態が存在しない
    ui -> user: AIエージェント画面を表示\n(初期状態)
    deactivate ui
end

== Step 2: 分析要求 ==

user -> ui: 分析要求を入力\n（例：「ワンピースの9月の売り上げを教えて」）\n+ タイトル入力欄（必須）
activate ui

== Step 3: SQL生成とプレビュー ==
ui -> ai: POST /api/v1/agent/generate-sql\n分析要求を送信
activate ai
ai -> ai: ユーザー要求を解釈\nSQL文を生成\n(スキーマ情報: GET /api/v1/agent/schema)

ai -> db: POST /api/v1/agent/preview\nプレビュー実行\n(LIMIT 5付きSQL)\nタイムアウト: 10秒（要相談）
activate db

alt 【正常】データ取得成功
    db -> ai: プレビューデータ返却
    deactivate db

    ai -> ui: 生成されたSQLと\nプレビューデータを返却
    deactivate ai

    ui -> ui: プレビューデータを\nlocalStorageに保存

    alt データ件数 > 0
        ui -> user: SQLとプレビューを表示\n✓ データが取得できました（該当: N件）\n[ ✓ 全件で実行 ] [ ✗ やり直す ]\n※ ヘッダーに [ お問い合わせ ] ボタン
        deactivate ui

    else データ件数 = 0
        ui -> user: SQLとプレビューを表示\n⚠️ 該当するデータが見つかりませんでした\n[ 修正します ] [ やり直す ]
        deactivate ui
    end

    note over ui
        ※ プレビューデータはlocalStorageに保存され、
        ページ遷移後も状態を復元可能
    end note

else 【エラー】実行失敗
    db -> ai: エラー返却\n(構文エラー/タイムアウト/\nテーブル不存在/接続エラー)
    deactivate db

    alt SQL構文エラー（2回まで修正可能）
        ai -> ui: エラー情報と\n生成されたSQLを返却
        deactivate ai

        ui -> ui: エラー文を解析\n修正プロンプトを準備

        ui -> user: ❌ SQL構文エラー\n生成されたSQL表示\nエラー内容説明\n(試行回数: 1/2)\n[ 修正します ]
        deactivate ui

        user -> ui: [ 修正します ] をクリック
        activate ui

        ui -> ai: POST /api/v1/agent/generate-sql\nエラー文を含む\n修正プロンプトを送信
        activate ai
        ai -> ai: エラー内容を踏まえて\nSQL文を修正

        ai -> db: POST /api/v1/agent/preview\n修正後のプレビュー実行\n(LIMIT 5付きSQL)
        activate db

        alt 修正成功
            db -> ai: プレビューデータ返却
            deactivate db
            ai -> ui: 修正されたSQLと\nプレビューデータを返却
            deactivate ai
            ui -> user: SQLとプレビューを表示\n✓ データが取得できました（該当: N件）\n[ ✓ 全件で実行 ] [ ✗ 修正します ]
            deactivate ui

        else 再度エラー（2回目）
            db -> ai: エラー返却
            deactivate db
            ai -> ui: エラー情報と\n生成されたSQLを返却
            deactivate ai

            ui -> ui: エラー文を解析\n修正プロンプトを準備

            ui -> user: ❌ SQL構文エラー\n生成されたSQL表示\nエラー内容説明\n(試行回数: 2/2)\n[ やり直す ]
            deactivate ui

            note over user
                [ やり直す ] をクリックすると
                Step 1（画面表示）へ戻る
            end note
        end

    else 接続エラー/認証エラー
        ai -> ui: エラー情報を返却
        deactivate ai
        ui -> user: ❌ 接続エラー\nログインページへ誘導\n[ ログインページへ ]
        deactivate ui

    end
end

== Step 4: 承認 or 修正 ==

alt 【A】SQLを承認する場合
    user -> ui: [ ✓ 全件で実行 ] をクリック
    activate ui

    == Step 5: 全件データ取得（非同期処理） ==
    ui -> db: POST /api/v1/agent/execute\n全件実行（非同期）\n(LIMIT制限なしSQL)
    activate db

    ui -> user: 実行中画面を表示\n進行度: 0%\n[ キャンセル ]
    deactivate ui

    note over user,db
        ※ 非同期処理
        - 実行中画面: 進行度合いを表示（0%〜100%）
        - 他の画面: 右下に進行度を表示（常に更新）
        - ユーザーは他の画面を開いて操作可能
        - Redisでリアルタイム更新
    end note

    loop 進行度更新（Redis）
        db -> ui: 進行状況を通知\n(進行度: XX%)
        ui -> user: 進行度を更新表示\n実行中画面: 進行度 XX%\n他画面右下: 進行度 XX%
    end

    alt 【正常】実行完了
        db -> ui: 全件データ返却\n(進行度: 100%)
        deactivate db

        ui -> ui: データを集計・整形

        ui -> ui: POST /api/v1/agent/history\n分析履歴を自動保存\n(title(Step2で入力) + SQL文 + 実行日時)\n※ フィードバックは未設定

        == Step 6: 結果表示 ==
        ui -> user: 分析結果を表示\n(タブ形式: プレビュー/棒グラフ/折れ線グラフ/円グラフ/表形式)\n[ 👍 良い ] [ 👎 悪い ]\n※ ヘッダーに [ お問い合わせ ][ CSVダウンロード ] ボタン

        note over user
            ※ 他の画面を開いていた場合は
            右下の進行度表示が「完了」になり、
            クリックで結果画面へ遷移
        end note
        deactivate ui

        note over user,ui
            ※ 全件実行後は修正不可。
            新しい分析をする場合はStep 1から開始。
            ※ 履歴は自動保存済み、フィードバックのみ追加可能
        end note

        alt ユーザーがフィードバックを追加
            user -> ui: [ 👍 良い ] または [ 👎 悪い ] をクリック
            activate ui

            ui -> ui: PUT /api/v1/agent/history/{id}\nフィードバックを更新\n(feedback: good/bad)

            ui -> user: フィードバック保存完了通知
            deactivate ui
        end

        note over user,ui
            ※ お問い合わせ機能（ヘッダー）
            ユーザーがヘッダーの [ お問い合わせ ] をクリック
            → スレッド情報とメッセージ情報をCSV出力
            → inquiry_YYYYMMDD_HHMMSS.csv
            → ダウンロード後、手動でSlackにSUへ報告
        end note

        user -> ui: CSVダウンロード or\nグラフ種類変更
    else 【キャンセル】ユーザーが中断
        user -> ui: キャンセルボタンクリック\n（実行中画面または右下の進行度表示）
        activate ui
        ui -> db: DELETE /api/v1/agent/cancel/{execution_id}\nクエリ中断
        deactivate db

        ui -> user: ⚠️ 実行がキャンセルされました
        deactivate ui

        note over ui
            ※ キャンセル機能はフェーズ2
            ※ 右下の進行度表示からもキャンセル可能
        end note

    else 【エラー】実行失敗
        db -> ui: エラー返却\n(タイムアウト/接続エラーなど)
        deactivate db

        alt 接続エラー/認証エラー
            ui -> user: ❌ 接続エラー\nログインページへ誘導\n[ ログインページへ ]
            deactivate ui

        else その他のエラー（タイムアウト等）
            ui -> user: ❌ エラー表示\nエラー内容説明\n[ やり直す ]
            deactivate ui

            note over user
                [ やり直す ] をクリックすると
                Step 1（画面表示）へ戻る
            end note
        end
    end

else 【B】SQLを修正する場合
    user -> ui: [ ✗ 修正します ] をクリック
    activate ui
    ui -> user: 修正入力欄を表示
    deactivate ui

    user -> ui: 修正内容を入力\n（例：「フィギュアだけを対象にして」）

    note over ui,ai
        Step 3に戻り、
        修正されたSQLを生成・プレビュー
    end note

    ui -> ai: POST /api/v1/agent/generate-sql\n修正要求を送信
    activate ai
    ai -> ai: 修正内容を反映\n新しいSQL文を生成

    ai -> db: POST /api/v1/agent/preview\nプレビュー実行\n(LIMIT 5付きSQL)
    activate db
    db -> ai: プレビューデータ返却
    deactivate db

    ai -> ui: 修正されたSQLと\nプレビューデータを返却
    deactivate ai

    ui -> user: 修正されたSQLとプレビューを表示\n[ ✓ 全件で実行 ] [ ✗ 修正します ]
    deactivate ui

    note over user
        承認されるまで
        このループを繰り返す
    end note
end

@enduml